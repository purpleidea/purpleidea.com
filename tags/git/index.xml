<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on purpleidea.com</title>
    <link>https://purpleidea.com/tags/git/</link>
    <description>Recent content in Git on purpleidea.com</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <lastBuildDate>Mon, 04 Aug 2025 21:10:30 -0400</lastBuildDate>
    <atom:link href="https://purpleidea.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Better git status</title>
      <link>https://purpleidea.com/blog/2025/08/04/better-git-status/</link>
      <pubDate>Mon, 04 Aug 2025 21:10:30 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2025/08/04/better-git-status/</guid>
      <description>I&amp;rsquo;ve been using git status for quite a long time now. Let&amp;rsquo;s make it better.&#xA;My old aliases:&#xA;My ~/.gitconfig has had:&#xA;[alias] s = status d = diff l = log --show-signature for as long as I can remember. They&amp;rsquo;ve served me well.&#xA;The problem:&#xA;In one of my projects, I occasionally have a bunch of untracked files, particularly when I&amp;rsquo;m hacking on something new that isn&amp;rsquo;t committed yet. This may include notes, new tests, and so on.</description>
    </item>
    <item>
      <title>Modules and imports in mgmt</title>
      <link>https://purpleidea.com/blog/2024/12/03/modules-and-imports-in-mgmt/</link>
      <pubDate>Tue, 03 Dec 2024 02:56:37 -0500</pubDate>
      <guid>https://purpleidea.com/blog/2024/12/03/modules-and-imports-in-mgmt/</guid>
      <description>Mgmt modules are used for structuring your code across multiple files. This keeps things readable and allows for code reusability. For example, it should be easy to write a single module which can be effectively used by many different parties. To me, it never felt like code reuse was a core design objective with other tools. In mgmt it has been since the very beginning. I&amp;rsquo;m very proud of our module system, so let me introduce you to it properly.</description>
    </item>
    <item>
      <title>Git branch filtering</title>
      <link>https://purpleidea.com/blog/2024/01/28/git-branch-filtering/</link>
      <pubDate>Sun, 28 Jan 2024 17:04:30 -0500</pubDate>
      <guid>https://purpleidea.com/blog/2024/01/28/git-branch-filtering/</guid>
      <description>If you have more than one git branch up in the air at the same time, having a system to track them and filter them is essential. Here are the stages I went through with git branch.&#xA;xkcd reminds us that we&amp;#39;re insane Prefixes:&#xA;My first tip involves using a memorable prefix. For new features I name my branches with feat/. For example feat/my-new-feature. Yes the slash and the dashes are treated like any regular character.</description>
    </item>
    <item>
      <title>Improving git diff output in 5 min</title>
      <link>https://purpleidea.com/blog/2023/06/01/improving-git-diff-output-in-5-min/</link>
      <pubDate>Thu, 01 Jun 2023 18:20:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2023/06/01/improving-git-diff-output-in-5-min/</guid>
      <description>Everyone uses git diff. But there&amp;rsquo;s that odd annoyance that you&amp;rsquo;ve probably seen before but are so used to that you&amp;rsquo;ve forgotten about it. The a/ and b/ prefixes&amp;hellip;&#xA;Example:&#xA;james@computer:~/code/mgmt (feat/cool-feature)$ git diff diff --git a/lang/funcs/core/os/readfile_func.go b/lang/funcs/core/os/readfile_func.go index 206ba798d..48ac29dc7 100644 --- a/lang/funcs/core/os/readfile_func.go +++ b/lang/funcs/core/os/readfile_func.go @@ -228,6 +228,8 @@ func (obj *ReadFileFunc) Stream() error { // Close runs some shutdown code for this function and turns off the stream. func (obj *ReadFileFunc) Close() error { + // TODO: Port to the new ctx-in-Stream close API.</description>
    </item>
    <item>
      <title>James is available for hire!</title>
      <link>https://purpleidea.com/blog/2020/09/10/james-is-available-for-hire/</link>
      <pubDate>Thu, 10 Sep 2020 08:00:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2020/09/10/james-is-available-for-hire/</guid>
      <description>TL;DR: I&amp;rsquo;m available for hire. Experienced at Linux/Golang/Mentoring/etc. More information below!&#xA;A drawing of me coding away. A photo of me giving a talk to a sold-out crowd. Background:&#xA;Two years ago, I left my job at Red Hat to work on mgmt config full-time. I&amp;rsquo;m still passionate about this project, and I&amp;rsquo;m proud of the progress that has been made in the last two years, but it&amp;rsquo;s time for me to explore new opportunities as well.</description>
    </item>
    <item>
      <title>Introducing: git tpush</title>
      <link>https://purpleidea.com/blog/2016/02/16/introducing-git-tpush/</link>
      <pubDate>Tue, 16 Feb 2016 12:15:06 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/02/16/introducing-git-tpush/</guid>
      <description>On today&amp;rsquo;s issue of &amp;ldquo;one hour hacks&amp;rdquo;, I&amp;rsquo;ll show you how you can stop your git drive-by&amp;rsquo;s to git master from breaking your CI tests&amp;hellip; Let&amp;rsquo;s continue!&#xA;The problem:&#xA;Sometimes I&amp;rsquo;ve got a shitty one-line patch that I want to push to git master. I&amp;rsquo;m usually right, and everything tests out fine, but usually isn&amp;rsquo;t always, and then I look silly while I frantically try to fix git master on a project that I maintain.</description>
    </item>
    <item>
      <title>Git archive with submodules and tar magic</title>
      <link>https://purpleidea.com/blog/2015/07/23/git-archive-with-submodules-and-tar-magic/</link>
      <pubDate>Thu, 23 Jul 2015 20:32:27 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2015/07/23/git-archive-with-submodules-and-tar-magic/</guid>
      <description>Git submodules are actually a very beautiful thing. You might prefer the word powerful or elegant, but that&amp;rsquo;s not the point. The downside is that they are sometimes misused, so as always, use with care. I&amp;rsquo;ve used them in projects like puppet-gluster, oh-my-vagrant, and others. If you&amp;rsquo;re not familiar with them, do a bit of reading and come back later, I&amp;rsquo;ll wait.&#xA;I recently did some work packaging Oh-My-Vagrant as RPM&amp;rsquo;s.</description>
    </item>
    <item>
      <title>Docker containers in Oh-My-Vagrant</title>
      <link>https://purpleidea.com/blog/2015/04/20/docker-containers-in-oh-my-vagrant/</link>
      <pubDate>Mon, 20 Apr 2015 04:35:43 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2015/04/20/docker-containers-in-oh-my-vagrant/</guid>
      <description>The Oh-My-Vagrant (omv) project is an easy way to bootstrap a development environment. It is particularly useful for spinning up an arbitrary number of virtual machines in Vagrant without writing ruby code. For multi-machine container development, omv can be used to help this happen more naturally.&#xA;Oh-My-Vagrant can be very useful as a docker application development environment. I&amp;rsquo;ve made a quick (&amp;lt;9min) screencast demoing this topic. Please have a look:</description>
    </item>
    <item>
      <title>Sharing dev environments with Oh-My-Vagrant</title>
      <link>https://purpleidea.com/blog/2015/04/08/sharing-dev-environments-with-oh-my-vagrant/</link>
      <pubDate>Wed, 08 Apr 2015 03:37:18 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2015/04/08/sharing-dev-environments-with-oh-my-vagrant/</guid>
      <description>With Oh-My-Vagrant (omv) you can set up a dev environment in seconds. (Read the omv introduction if you&amp;rsquo;ve never used it before!) Since everything is defined in a single omv.yaml file, it is easy to share your cluster prototype with a friend! The one missing feature was associating code with this config file. This is now possible! Let me show you how it works&amp;hellip;&#xA;In theÂ omv.yaml file there is an extern variable.</description>
    </item>
    <item>
      <title>Fancy git aliases and git cherryfetch</title>
      <link>https://purpleidea.com/blog/2015/03/16/fancy-git-aliases-and-git-cherryfetch/</link>
      <pubDate>Mon, 16 Mar 2015 05:36:19 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2015/03/16/fancy-git-aliases-and-git-cherryfetch/</guid>
      <description>Here are two quick git tricks that I&amp;rsquo;ve added to my toolbox lately&amp;hellip;&#xA;I wanted to create a git alias that takes in argv from the command, but in the middle of the command. Here&amp;rsquo;s the hack that I came up with for the [alias] section of my ~/.gitconfig:&#xA;[alias] # cherryfetch fetches a repo ($1) / branch ($2) and applies it rebased! # the &amp;amp;&amp;amp; true at the end eats up the appended args cherryfetch = !</description>
    </item>
    <item>
      <title>Testing Evolution&#39;s git master and GNOME continuous</title>
      <link>https://purpleidea.com/blog/2014/10/22/testing-evolutions-git-master-and-gnome-continuous/</link>
      <pubDate>Wed, 22 Oct 2014 17:22:56 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/10/22/testing-evolutions-git-master-and-gnome-continuous/</guid>
      <description>I&amp;rsquo;ve wanted a feature in Evolution for a while. It was formally requested in 2002, and it just recently got fixed in git master. I only started publicly groaning about this missing feature in 2013, and mcrha finally patched it. I tested the feature and found a small bug, mcrha patched that too, and I finally re-tested it. Now I&amp;rsquo;m blogging about this process so that you can get involved too!</description>
    </item>
    <item>
      <title>Hacking out an Openshift app</title>
      <link>https://purpleidea.com/blog/2014/10/18/hacking-out-an-openshift-app/</link>
      <pubDate>Sat, 18 Oct 2014 16:43:00 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/10/18/hacking-out-an-openshift-app/</guid>
      <description>I had an itch to scratch, and I wanted to get a bit more familiar with Openshift. I had used it in the past, but it was time to have another go. The app and the code are now available. Feel free to check out:&#xA;https://pdfdoc-purpleidea.rhcloud.com/ This is a simple app that takes the URL of a markdown file on GitHub, and outputs a pandoc converted PDF. I wanted to use pandoc specifically, because it produces PDF&#39;s that were beautifully created with LaTeX.</description>
    </item>
    <item>
      <title>Continuous integration for Puppet modules</title>
      <link>https://purpleidea.com/blog/2014/10/10/continuous-integration-for-puppet-modules/</link>
      <pubDate>Fri, 10 Oct 2014 15:34:53 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/10/10/continuous-integration-for-puppet-modules/</guid>
      <description>I just patched puppet-gluster and puppet-ipa to bring their infrastructure up to date with the current state of affairs&amp;hellip;&#xA;What&amp;rsquo;s new?&#xA;Better README&#39;s Rake syntax checking (fewer oopsies) CI (testing) with travis on git push (automatic testing for everyone) Use ofÂ .pmtignore to ignore files from puppet module packages (finally) Pushing modules to the forge with blacksmith (sweet!) This last point deserves another mention. Puppetlabs created the &#34;forge&#34; to try to provide some sort of added value to their stewardship.</description>
    </item>
    <item>
      <title>Fixing dropbox âconflicted copyâ problems</title>
      <link>https://purpleidea.com/blog/2014/09/30/fixing-dropbox-conflicted-copy-problems/</link>
      <pubDate>Tue, 30 Sep 2014 01:05:07 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/09/30/fixing-dropbox-conflicted-copy-problems/</guid>
      <description>I usually avoid proprietary cloud services because of freedom, privacy and vendor lock-in concerns. In addition, there are some excellent libre (and hosted) services such as WordPress, Wikipedia and OpenShift which don&amp;rsquo;t have the above problems. Thirdly, there are every day Free Software tools such as Fedora GNU/Linux, Libreoffice, and git-annex-assistant which make my computing much more powerful. Finally, there are some hosted services that I use that don&amp;rsquo;t lock me in because I use them as push-only mirrors, and I only interact with them using Free Software tools.</description>
    </item>
    <item>
      <title>Keeping git submodules in sync with your branches</title>
      <link>https://purpleidea.com/blog/2014/05/06/keeping-git-submodules-in-sync-with-your-branches/</link>
      <pubDate>Tue, 06 May 2014 19:34:13 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/05/06/keeping-git-submodules-in-sync-with-your-branches/</guid>
      <description>This is a quick trick for making working with git submodules more magic.&#xA;One day you might find that using git submodules is needed for your project. It&amp;rsquo;s probably not necessary for everyday hacking, but if you&amp;rsquo;re glue-ing things together, it can be quite useful. Puppet-Gluster uses this technique to easily include all the dependencies needed for a Puppet-Gluster+Vagrant automatic deployment.&#xA;If you&amp;rsquo;re a good hacker, you develop things in separate feature branches.</description>
    </item>
    <item>
      <title>Show the exit status in your $PS1</title>
      <link>https://purpleidea.com/blog/2014/01/29/show-the-exit-status-in-your-ps1/</link>
      <pubDate>Wed, 29 Jan 2014 19:43:44 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2014/01/29/show-the-exit-status-in-your-ps1/</guid>
      <description>As an update to my earlier article, a friend gave me an idea of how to make my $PS1 even better&amp;hellip; First, the relevant part of my ~/.bashrc:&#xA;ps1_prompt() { local ps1_exit=$? if [ $ps1_exit -eq 0 ]; then #ps1_status=`echo -e &amp;#34;\[&amp;amp;#092;&amp;amp;#048;33[32m\]&amp;#34;&amp;#39;\$&amp;#39;&amp;#34;\[&amp;amp;#092;&amp;amp;#048;33[0m\]&amp;#34;` ps1_status=&amp;#39;\$&amp;#39; else ps1_status=`echo -e &amp;#34;\[&amp;amp;#092;&amp;amp;#048;33[1;31m\]&amp;#34;&amp;#39;\$&amp;#39;&amp;#34;\[&amp;amp;#092;&amp;amp;#048;33[0m\]&amp;#34;` fi ps1_git=&amp;#39;&amp;#39; if [ &amp;#34;$(__git_ps1 %s)&amp;#34; != &amp;#39;&amp;#39; -a &amp;#34;$(__git_ps1 %s)&amp;#34; != &amp;#39;master&amp;#39; ]; then ps1_git=&amp;#34; (\[&amp;amp;#092;&amp;amp;#048;33[32m\]&amp;#34;$(__git_ps1 &amp;#34;%s&amp;#34;)&amp;#34;\[&amp;amp;#092;&amp;amp;#048;33[0m\])&amp;#34; fi PS1=&amp;#34;${debian_chroot:+($debian_chroot)}\u@\h:\[&amp;amp;#092;&amp;amp;#048;33[01;34m\]\w\[&amp;amp;#092;&amp;amp;#048;33[00m\]${ps1_git}${ps1_status} &amp;#34; } # preserve earlier PROMPT_COMMAND entries.</description>
    </item>
    <item>
      <title>Show current git branch in PS1 when branch is not master</title>
      <link>https://purpleidea.com/blog/2013/10/10/show-current-git-branch-in-ps1-when-branch-is-not-master/</link>
      <pubDate>Thu, 10 Oct 2013 22:16:28 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2013/10/10/show-current-git-branch-in-ps1-when-branch-is-not-master/</guid>
      <description>Short post, long command&amp;hellip;&#xA;I&amp;rsquo;ve decided to start showing the current git branch in my PS1. However, since I don&amp;rsquo;t want to know when I&amp;rsquo;m on master, I had to write a new PS1 that I haven&amp;rsquo;t yet seen anywhere. Add the following to your .bashrc: PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w\$ &amp;#39; if [ -e /usr/share/git-core/contrib/completion/git-prompt.sh ]; then . /usr/share/git-core/contrib/completion/git-prompt.sh PS1=&amp;#39;${debian_chroot:+($debian_chroot)}\u@\h:\w$([ &amp;#34;$(__git_ps1 %s)&amp;#34; != &amp;#34;&amp;#34; -a &amp;#34;$(__git_ps1 %s)&amp;#34; != &amp;#34;master&amp;#34; ] &amp;amp;&amp;amp; (echo -e &amp;#34; (\[33[32m\]&amp;#34;$(__git_ps1 &amp;#34;%s&amp;#34;)&amp;#34;\[33[0m\])&amp;#34;) || echo &amp;#34;&amp;#34;)\$ &amp;#39; fi</description>
    </item>
    <item>
      <title>puppet lsi hardware raid module</title>
      <link>https://purpleidea.com/blog/2013/06/17/puppet-lsi-hardware-raid-module/</link>
      <pubDate>Mon, 17 Jun 2013 18:11:02 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2013/06/17/puppet-lsi-hardware-raid-module/</guid>
      <description>In response to some discussion in the gluster community, I am releasing my puppet-lsi module. It&amp;rsquo;s quite simple, but it is very useful for rebuilding machines. It could do a lot more, but I wanted to depend on the proprietary LSI tools as little as possible. Running megacli with puppet would be a very doable hack, but I&amp;rsquo;m not sure enough devops out there who would use that feature.&#xA;Usage is straightforward if you like the sensible defaults:</description>
    </item>
    <item>
      <title>puppet gluster module now in git</title>
      <link>https://purpleidea.com/blog/2012/07/27/puppet-gluster-module-now-in-git/</link>
      <pubDate>Fri, 27 Jul 2012 00:48:50 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2012/07/27/puppet-gluster-module-now-in-git/</guid>
      <description>The thoughtful bodepd has been kind enough to help me get my puppet-gluster module off the ground and publicized a bit too. My first few commits have been all clean up to get my initial hacking up to snuff with the puppet style guidelines. Sadly, I love indenting my code with tabs, and this is against the puppet rules :(&#xA;http://www.emacswiki.org/emacs/TabsSpacesBoth I&amp;rsquo;ll be accepting patches by email, but I&amp;rsquo;d prefer discussion first, especially since I&amp;rsquo;ve got a few obvious things brewing in my mental queue that should hit master shortly.</description>
    </item>
    <item>
      <title>git, gitosis, gitweb and friends...</title>
      <link>https://purpleidea.com/blog/2010/08/19/git-gitosis-gitweb-and-friends/</link>
      <pubDate>Thu, 19 Aug 2010 11:03:46 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/08/19/git-gitosis-gitweb-and-friends/</guid>
      <description>In case it wasn&amp;rsquo;t already obvious, I am a huge fan of git, and often prefer it over sliced bread. Recently to help a small team of programmers collaborate, I decided to setup a private git server for them to use. By no claim of mine is the following tutorial unique, however I am writing this to aid those who had trouble following other online tutorials.&#xA;Goal: Setup a central git server for private or public source sharing, without having to give everyone a separate shell account.</description>
    </item>
    <item>
      <title>lecturing and git-bisect</title>
      <link>https://purpleidea.com/blog/2010/03/31/lecturing-and-git-bisect/</link>
      <pubDate>Wed, 31 Mar 2010 10:13:48 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/03/31/lecturing-and-git-bisect/</guid>
      <description>I was recently asked to give a lecture for the PRELUDE series at McGill. Here was my abstract:&#xA;I don&#39;t like computers, and neither should you. We spend too much time figuring out how to talk to them, instead of having them figure out how to understand us. There&#39;s a big discontinuity between what software is providing, and the killer features we want! We&#39;re not completely lost though. There are a lot of good tools and methodologies available!</description>
    </item>
  </channel>
</rss>
