<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sync on purpleidea.com</title>
    <link>https://purpleidea.com/tags/sync/</link>
    <description>Recent content in Sync on purpleidea.com</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <lastBuildDate>Fri, 26 May 2023 01:21:22 -0400</lastBuildDate>
    <atom:link href="https://purpleidea.com/tags/sync/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blocked select logging (deadlock finding) in golang</title>
      <link>https://purpleidea.com/blog/2023/05/26/blocked-select-logging-in-golang/</link>
      <pubDate>Fri, 26 May 2023 01:21:22 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2023/05/26/blocked-select-logging-in-golang/</guid>
      <description>I&amp;rsquo;ve been writing some massively concurrent code for mgmt lately. The concurrency makes it incredibly bug prone. In this case it&amp;rsquo;s usually races or deadlocks. I&amp;rsquo;ve got a new trick to make the process more pleasant.&#xA;The Problem:&#xA;I&amp;rsquo;m sure many of you have written some code like this before:&#xA;// just a small excerpt for { select { case &amp;lt;-someEvent: // some awesome thing happened! case &amp;lt;-ctx.Done(): return ctx.Err() } } And during debugging, you might have gotten frustrated and added some printf&amp;rsquo;s:</description>
    </item>
    <item>
      <title>Deadline context test cancellation in golang</title>
      <link>https://purpleidea.com/blog/2023/02/24/deadline-context-test-cancellation-in-golang/</link>
      <pubDate>Fri, 24 Feb 2023 22:36:00 -0500</pubDate>
      <guid>https://purpleidea.com/blog/2023/02/24/deadline-context-test-cancellation-in-golang/</guid>
      <description>I decided to write a fancy test harness in golang today. The test wraps a big internal engine for mgmt and at the top-level it takes a context for cancellation. If you don&amp;rsquo;t know about the context package, then you should go understand that and then come back here&amp;hellip; Don&amp;rsquo;t feel bad, I had no idea what it was about at first either!&#xA;The Problem:&#xA;I assumed there would be some way to follow a notification from the test runner down into my test to tell it when it was time to cleanup and exit early&amp;hellip; I expected that making my own ^C signal handler wouldn&amp;rsquo;t be correct, and I (incorrectly) assumed that the interface I&amp;rsquo;d be looking for would offer a golang context that I could pass into my code.</description>
    </item>
    <item>
      <title>A new sync primitive in golang</title>
      <link>https://purpleidea.com/blog/2018/05/20/a-new-sync-primitive-in-golang/</link>
      <pubDate>Sun, 20 May 2018 18:00:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2018/05/20/a-new-sync-primitive-in-golang/</guid>
      <description>I&amp;rsquo;ve been working on lots of new stuff in mgmt and I had a synchronization problem that needed solving&amp;hellip; Long story short, I built it into a piece of re-usable functionality, exactly like you might find in the sync package. For details and examples, please continue reading&amp;hellip;&#xA;The Problem:&#xA;I want to multicast a signal to an arbitrary number of goroutines. As you might already know, this can already be done with a chan struct{}.</description>
    </item>
  </channel>
</rss>
