<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on purpleidea.com</title>
    <link>https://purpleidea.com/tags/programming/</link>
    <description>Recent content in Programming on purpleidea.com</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <lastBuildDate>Mon, 02 Sep 2013 05:50:23 +0000</lastBuildDate>
    <atom:link href="https://purpleidea.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Puppet-Gluster and me at Linuxcon</title>
      <link>https://purpleidea.com/blog/2013/09/02/puppet-gluster-and-me-at-linuxcon/</link>
      <pubDate>Mon, 02 Sep 2013 05:50:23 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2013/09/02/puppet-gluster-and-me-at-linuxcon/</guid>
      <description>John Mark Walker, (from Redhat) has been kind enough to invite me to speak at the Linuxcon Gluster Workshop in New Orleans. I&amp;rsquo;ll be speaking about puppet-gluster, giving demos, and hopefully showing off some new features. I&amp;rsquo;m also looking forward to meeting up with gluster expert Joe Julian.&#xA;If there are features that puppet-gluster is missing, or you have a use case that I haven&amp;rsquo;t covered, please let me know, and I&amp;rsquo;ll try to work on it for you ahead of the conference.</description>
    </item>
    <item>
      <title>a puppet-ipa user type and a new difference engine</title>
      <link>https://purpleidea.com/blog/2013/07/09/a-puppet-ipa-user-type-and-a-new-difference-engine/</link>
      <pubDate>Tue, 09 Jul 2013 06:41:54 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2013/07/09/a-puppet-ipa-user-type-and-a-new-difference-engine/</guid>
      <description>A simple hack to add a user type to my puppet-ipa module turned out to cause quite a stir. I&amp;rsquo;ve just pushed these changes out for your testing:&#xA;3 files changed, 1401 insertions(+), 215 deletions(-) You should now have a highly capable user type, along with some quick examples.&#xA;I&amp;rsquo;ve also done a rewrite of the difference engine, so that it is cleaner and more robust. It now uses function decorators and individual function comparators to help wrangle the data into easily comparable forms.</description>
    </item>
    <item>
      <title>scary cool bash scripting inside a Makefile</title>
      <link>https://purpleidea.com/blog/2010/03/31/scary-cool-bash-scripting-inside-a-makefile/</link>
      <pubDate>Wed, 31 Mar 2010 10:05:21 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/03/31/scary-cool-bash-scripting-inside-a-makefile/</guid>
      <description>Makefiles are both scary and wonderful. When both these adjectives are involved, it often makes for interesting hacking. This is likely the reason I use bash.&#xA;In any case, I digress, back to real work. I use Makefiles as a general purpose tool to launch any of a number of shell scripts which I use to maintain my code, and instead of actually having external shell scripts, I just build any necessary bash right into the Makefile.</description>
    </item>
    <item>
      <title>getting gedit to work like magic</title>
      <link>https://purpleidea.com/blog/2010/03/09/getting-gedit-to-work-like-magic/</link>
      <pubDate>Tue, 09 Mar 2010 17:17:51 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/03/09/getting-gedit-to-work-like-magic/</guid>
      <description>i use gnu/linux. it&amp;rsquo;s probably no secret. what is more of a secret, is that i secretly (well actually not so secretly) love using gedit for editing text. i still use vim, echo (gnu bash) and emacs (but only for org-mode).&#xA;vim is really, really great. but for day to day full-screen coding, i love working in gedit. i only have one [1] longstanding gripe, and today i believe that it is solved.</description>
    </item>
    <item>
      <title>reading obscure documentation</title>
      <link>https://purpleidea.com/blog/2010/02/08/reading-obscure-documentation/</link>
      <pubDate>Mon, 08 Feb 2010 13:05:23 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/02/08/reading-obscure-documentation/</guid>
      <description>Sometimes the interfaces you need just aren&amp;rsquo;t well documented, butÂ thanks to the internets, some websearches, and a useful dictionary, you can often decipher random web documentation jargon to help you produce useful code.&#xA;You can hire James and his team at m9rx corporation. You can follow James on Mastodon for more frequent updates and other random thoughts. You can follow James on Twitter for more frequent updates and other random thoughts.</description>
    </item>
    <item>
      <title>getopt vs. optparse vs. argparse</title>
      <link>https://purpleidea.com/blog/2010/02/03/getopt-vs-optparse-vs-argparse/</link>
      <pubDate>Wed, 03 Feb 2010 12:25:08 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/02/03/getopt-vs-optparse-vs-argparse/</guid>
      <description>sooner or later you&amp;rsquo;ll end up needing to do some argument parsing. the foolish end up writing their own yucky parser that ends up having a big if statement filled with things like:&#xA;if len(sys.argv) &amp;gt; 1&#xA;in it. don&amp;rsquo;t do this unless you have a really good excuse.&#xA;sooner or later, someone directs you to getopt, and you happily continue on with buggy manual parsing thinking you&amp;rsquo;ve &amp;ldquo;found the way&amp;rdquo;.</description>
    </item>
    <item>
      <title>sorting out the confusion</title>
      <link>https://purpleidea.com/blog/2010/01/27/sorting-out-the-confusion/</link>
      <pubDate>Wed, 27 Jan 2010 13:03:51 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2010/01/27/sorting-out-the-confusion/</guid>
      <description>if i&amp;rsquo;ve been silent as of late, it&amp;rsquo;s because i&amp;rsquo;ve been furiously coding away. i&amp;rsquo;ve got what i think are some elegant implementations cooking, and with any luck my extra work will pay off in hours and days and months of time saved down the road. i&amp;rsquo;ve got a few interesting (interesting with respect to your average rating of the blog posts on this site) posts cooking in my mind, and hopefully they&amp;rsquo;ll appear shortly!</description>
    </item>
    <item>
      <title>the python subprocess module</title>
      <link>https://purpleidea.com/blog/2009/10/07/the-python-subprocess-module/</link>
      <pubDate>Wed, 07 Oct 2009 10:24:53 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2009/10/07/the-python-subprocess-module/</guid>
      <description>i&amp;rsquo;m sure that i won&amp;rsquo;t be able to tell you anything revolutionary which can&amp;rsquo;t be found out by reading the manual, but i thought i would clarify it, and by showing you a specific example which i needed.&#xA;subprocess.Popen accepts a bunch or args, one of which is the shell argument, which is False by default. If you specify shell=True then the first argument of popen should be a string which is what gets parsed by the shell and then eventually run.</description>
    </item>
    <item>
      <title>cheetah == fortran</title>
      <link>https://purpleidea.com/blog/2009/07/21/cheetah-fortran/</link>
      <pubDate>Tue, 21 Jul 2009 16:59:50 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2009/07/21/cheetah-fortran/</guid>
      <description>turns out the cheetah python templating engine (2.0 since year 2006) is quite reminiscent of fortran (since the 1950&amp;rsquo;s) in their use of the #slurp directive (cheetah) and the $ string. either one, when appended to the end of a string, remove the implicit newline which usually gets printed. it took me ages to figure out how to suppress newline printing back when i did someone&amp;rsquo;s fortran homework, now i&amp;rsquo;ve had to struggle with it all over again.</description>
    </item>
    <item>
      <title>[py]inotify, polling, gtk and gio</title>
      <link>https://purpleidea.com/blog/2009/07/21/pyinotify-polling-gtk-and-gio/</link>
      <pubDate>Tue, 21 Jul 2009 10:19:52 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2009/07/21/pyinotify-polling-gtk-and-gio/</guid>
      <description>i have this software with a gtk mainloop, using dbus and all that fun stuff that seems to play together nicely. i know about the kernel inotify support, and i wanted it to get integrated with that above stack. i thought i was supposed to do it with pyinotify and io_add_watch, but on closer inspection into the pyinotify code it turns out that it seems to actually use polling! (search for: select.</description>
    </item>
    <item>
      <title>logging out of $SESSION</title>
      <link>https://purpleidea.com/blog/2009/07/13/logging-out-of-session/</link>
      <pubDate>Mon, 13 Jul 2009 10:05:05 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2009/07/13/logging-out-of-session/</guid>
      <description>the software (evanescent) that i&amp;rsquo;m working on is supposed to log out the user from its current X session. originally i had some yucky looking code that ran a kill on gnome-session, which quickly got replaced with:&#xA;os.system(&amp;#39;gnome-session-save --logout-dialog&amp;#39;) i&amp;rsquo;ve decided this was still a little crufty, so i&amp;rsquo;ve recently replaced this with:&#xA;bus = dbus.SessionBus() remote_object = bus.get_object(&amp;#39;org.gnome.SessionManager&amp;#39;, &amp;#39;/org/gnome/SessionManager&amp;#39;) # specify the dbus_interface in each call remote_object.Logout(0, dbus_interface=&amp;#39;org.gnome.SessionManager&amp;#39;) # or create an Interface wrapper for the remote object #iface = dbus.</description>
    </item>
  </channel>
</rss>
