<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on purpleidea.com</title>
    <link>https://purpleidea.com/tags/golang/</link>
    <description>Recent content in Golang on purpleidea.com</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <lastBuildDate>Fri, 26 May 2023 01:21:22 -0400</lastBuildDate>
    <atom:link href="https://purpleidea.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blocked select logging (deadlock finding) in golang</title>
      <link>https://purpleidea.com/blog/2023/05/26/blocked-select-logging-in-golang/</link>
      <pubDate>Fri, 26 May 2023 01:21:22 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2023/05/26/blocked-select-logging-in-golang/</guid>
      <description>I&amp;rsquo;ve been writing some massively concurrent code for mgmt lately. The concurrency makes it incredibly bug prone. In this case it&amp;rsquo;s usually races or deadlocks. I&amp;rsquo;ve got a new trick to make the process more pleasant.&#xA;The Problem:&#xA;I&amp;rsquo;m sure many of you have written some code like this before:&#xA;// just a small excerpt for { select { case &amp;lt;-someEvent: // some awesome thing happened! case &amp;lt;-ctx.Done(): return ctx.Err() } } And during debugging, you might have gotten frustrated and added some printf&amp;rsquo;s:</description>
    </item>
    <item>
      <title>Deadline context test cancellation in golang</title>
      <link>https://purpleidea.com/blog/2023/02/24/deadline-context-test-cancellation-in-golang/</link>
      <pubDate>Fri, 24 Feb 2023 22:36:00 -0500</pubDate>
      <guid>https://purpleidea.com/blog/2023/02/24/deadline-context-test-cancellation-in-golang/</guid>
      <description>I decided to write a fancy test harness in golang today. The test wraps a big internal engine for mgmt and at the top-level it takes a context for cancellation. If you don&amp;rsquo;t know about the context package, then you should go understand that and then come back here&amp;hellip; Don&amp;rsquo;t feel bad, I had no idea what it was about at first either!&#xA;The Problem:&#xA;I assumed there would be some way to follow a notification from the test runner down into my test to tell it when it was time to cleanup and exit early&amp;hellip; I expected that making my own ^C signal handler wouldn&amp;rsquo;t be correct, and I (incorrectly) assumed that the interface I&amp;rsquo;d be looking for would offer a golang context that I could pass into my code.</description>
    </item>
    <item>
      <title>James is available for hire!</title>
      <link>https://purpleidea.com/blog/2020/09/10/james-is-available-for-hire/</link>
      <pubDate>Thu, 10 Sep 2020 08:00:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2020/09/10/james-is-available-for-hire/</guid>
      <description>TL;DR: I&amp;rsquo;m available for hire. Experienced at Linux/Golang/Mentoring/etc. More information below!&#xA;A drawing of me coding away. A photo of me giving a talk to a sold-out crowd. Background:&#xA;Two years ago, I left my job at Red Hat to work on mgmt config full-time. I&amp;rsquo;m still passionate about this project, and I&amp;rsquo;m proud of the progress that has been made in the last two years, but it&amp;rsquo;s time for me to explore new opportunities as well.</description>
    </item>
    <item>
      <title>Inexpensive Dynamic DNS over IRC</title>
      <link>https://purpleidea.com/blog/2020/09/01/inexpensive-dns-over-irc/</link>
      <pubDate>Tue, 01 Sep 2020 17:08:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2020/09/01/inexpensive-dns-over-irc/</guid>
      <description>The one thing that I&amp;rsquo;ve been using for longer than ssh is dynamic dns. In this article I&amp;rsquo;ll explain how I built an inexpensive, reliable, private alternative to the mainstream tools commonly available today using only golang and IRC.&#xA;Background:&#xA;I&amp;rsquo;ve had an account with dyndns.org for a long time. They used to be free, but then they cut off the free tier, but left existing accounts alone, until they eventually cut all the non-payers off entirely.</description>
    </item>
    <item>
      <title>A guide to fighting with a Cisco access point</title>
      <link>https://purpleidea.com/blog/2018/12/21/a-guide-to-fighting-with-a-cisco-access-point/</link>
      <pubDate>Fri, 21 Dec 2018 07:45:00 -0500</pubDate>
      <guid>https://purpleidea.com/blog/2018/12/21/a-guide-to-fighting-with-a-cisco-access-point/</guid>
      <description>In my hands is a Cisco AIR-CAP-3502-E-A-K9 that I saved from the landfill. After about eight hours of suffering, and what was surely a cancer causing dose of RF-radiation, I now know:&#xA;How to convince this access point to provide me with wifi.&#xA;Why Cisco products are probably best left in the garbage.&#xA;What follows is my setup guide and review for using a Cisco Aironet device. This guide will likely be useful with other models of Cisco devices, but use your own best judgment.</description>
    </item>
    <item>
      <title>Breaking out of the Slack walled garden</title>
      <link>https://purpleidea.com/blog/2018/06/22/breaking-out-of-the-slack-walled-garden/</link>
      <pubDate>Fri, 22 Jun 2018 13:50:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2018/06/22/breaking-out-of-the-slack-walled-garden/</guid>
      <description>I&amp;rsquo;m old school cool. Real hackers chat on open, distributed platforms. Most technical discussion can be found on the Libera.chat IRC network. It&amp;rsquo;s not perfect, but the advantages clearly outweigh the drawbacks.&#xA;Recently, I needed to join an existing large &amp;ldquo;community&amp;rdquo; on the centralized, proprietary walled garden that is the Slack network.&#xA;The Problem:&#xA;Connecting to the the Slack server requires that you use either the proprietary client or their proprietary web app.</description>
    </item>
    <item>
      <title>A new sync primitive in golang</title>
      <link>https://purpleidea.com/blog/2018/05/20/a-new-sync-primitive-in-golang/</link>
      <pubDate>Sun, 20 May 2018 18:00:00 -0400</pubDate>
      <guid>https://purpleidea.com/blog/2018/05/20/a-new-sync-primitive-in-golang/</guid>
      <description>I&amp;rsquo;ve been working on lots of new stuff in mgmt and I had a synchronization problem that needed solving&amp;hellip; Long story short, I built it into a piece of re-usable functionality, exactly like you might find in the sync package. For details and examples, please continue reading&amp;hellip;&#xA;The Problem:&#xA;I want to multicast a signal to an arbitrary number of goroutines. As you might already know, this can already be done with a chan struct{}.</description>
    </item>
    <item>
      <title>Faster golang builds</title>
      <link>https://purpleidea.com/blog/2017/02/26/faster-golang-builds/</link>
      <pubDate>Sun, 26 Feb 2017 17:02:35 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2017/02/26/faster-golang-builds/</guid>
      <description>I&amp;rsquo;ve been hacking in golang since before version 1.4, and the speed at which my builds finished has been mostly trending downwards. Let&amp;rsquo;s look into the reasons and some fixes. TL;DR click-bait title: &amp;ldquo;Get 4x faster golang builds with this one trick!&amp;rdquo;.&#xA;Here are the three reasons my builds got slower:&#xA;The compiler&#xA;Before version 1.5, the compiler was written in C but with that release, it moved to being pure golang.</description>
    </item>
    <item>
      <title>Remote execution in mgmt</title>
      <link>https://purpleidea.com/blog/2016/10/07/remote-execution-in-mgmt/</link>
      <pubDate>Fri, 07 Oct 2016 15:33:17 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/10/07/remote-execution-in-mgmt/</guid>
      <description>Bootstrapping a cluster from your laptop, or managing machines without needing to first setup a separate config management infrastructure are both very reasonable and fundamental asks. I was particularly inspired by Ansible&amp;rsquo;s agent-less remote execution model, but never wanted to build a centralized orchestrator. I soon realized that I could have my ice cream and eat it too.&#xA;Prior knowledge&#xA;If you haven&amp;rsquo;t read the earlier articles about mgmt, then I recommend you start with those, and then come back here.</description>
    </item>
    <item>
      <title>Automatic clustering in mgmt</title>
      <link>https://purpleidea.com/blog/2016/06/20/automatic-clustering-in-mgmt/</link>
      <pubDate>Mon, 20 Jun 2016 12:28:51 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/06/20/automatic-clustering-in-mgmt/</guid>
      <description>In mgmt, deploying and managing your clustered config management infrastructure needs to be as automatic as the infrastructure you&amp;rsquo;re using mgmt to manage. With mgmt, instead of a centralized data store, we function as a distributed system, built on top of etcd and the raft protocol.&#xA;In this article, I&amp;rsquo;ll cover how this feature works.&#xA;Foreword:&#xA;Mgmt is a next generation configuration management project. If you haven&amp;rsquo;t heard of it yet, or you don&amp;rsquo;t remember why we use a distributed database, start by reading the previous articles:</description>
    </item>
    <item>
      <title>Automatic grouping in mgmt</title>
      <link>https://purpleidea.com/blog/2016/03/30/automatic-grouping-in-mgmt/</link>
      <pubDate>Wed, 30 Mar 2016 06:03:47 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/03/30/automatic-grouping-in-mgmt/</guid>
      <description>In this post, I&amp;rsquo;ll tell you about the recently released &amp;ldquo;automatic grouping&amp;rdquo; or &amp;ldquo;AutoGroup&amp;rdquo; feature in mgmt, a next generation configuration management prototype. If you aren&amp;rsquo;t already familiar with mgmt, I&amp;rsquo;d recommend you start by reading the introductory post, and the second post. There&amp;rsquo;s also an introductory video.&#xA;Resources in a graph&#xA;Most configuration management systems use something called a directed acyclic graph, or DAG. This is a fancy way of saying that it is a bunch of circles (vertices) which are connected with arrows (edges).</description>
    </item>
    <item>
      <title>Debugging golang programs</title>
      <link>https://purpleidea.com/blog/2016/02/15/debugging-golang-programs/</link>
      <pubDate>Mon, 15 Feb 2016 16:47:57 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/02/15/debugging-golang-programs/</guid>
      <description>I&amp;rsquo;ve been writing a lot of golang lately. I&amp;rsquo;ve hit painful problems in the past. Here are some debugging tips. Hopefully they help you out. I bet you don&amp;rsquo;t know #2.&#xA;#0 Use log.Printf:&#xA;This should go without saying, but I&amp;rsquo;m ashamed to say it&amp;rsquo;s what I use the most. We&amp;rsquo;ve only been C programming for 44+ years, and it&amp;rsquo;s still what is most useful!&#xA;#1 Use go run -race:</description>
    </item>
    <item>
      <title>Next generation configuration mgmt</title>
      <link>https://purpleidea.com/blog/2016/01/18/next-generation-configuration-mgmt/</link>
      <pubDate>Mon, 18 Jan 2016 00:52:10 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2016/01/18/next-generation-configuration-mgmt/</guid>
      <description>It&amp;rsquo;s no secret to the readers of this blog that I&amp;rsquo;ve been active in the configuration management space for some time. I owe most of my knowledge to what I&amp;rsquo;ve learned while working with Puppet and from other hackers working in and around various other communities.&#xA;I&amp;rsquo;ve published, a number, of articles, in an, attempt, to push, the field, forwards, and to, share the, knowledge, that I&amp;rsquo;ve, learned, with others. I&amp;rsquo;ve spent many nights thinking about these problems, but it is not without some chagrin that I realized that the current state-of-the-art in configuration management cannot easily (or elegantly) solve all the problems for which I wish to write solutions.</description>
    </item>
    <item>
      <title>Golang parallelism issues causing “too many open files” error</title>
      <link>https://purpleidea.com/blog/2015/07/27/golang-parallelism-issues-causing-too-many-open-files-error/</link>
      <pubDate>Mon, 27 Jul 2015 11:39:45 +0000</pubDate>
      <guid>https://purpleidea.com/blog/2015/07/27/golang-parallelism-issues-causing-too-many-open-files-error/</guid>
      <description>I&amp;rsquo;ve been hacking in golang for a while, but I&amp;rsquo;ll admit that I didn&amp;rsquo;t get too deep into some of the language nuances until more recently. Since some of them have started to bite me, here&amp;rsquo;s a little post-mortem of one of the problems I was having.&#xA;After hacking and testing code all day, I made a seemingly innocuous change, and when running my program, I saw the following error:</description>
    </item>
  </channel>
</rss>
